> ## 5.1 XXX XXX Fluxos

basePath = '' #Para se montar a lista com os arquivos da base. No caso de treinameno, geralmente e a mesma do experiment path
experimentPath = ''  #Diretorio do experimento. Tem a conotaÃ§ao de registrar as saidas do experimento (graficos, por exemplo)
modelPath =  "/content/drive/MyDrive/Colab Notebooks/Programas-Notebooks/Federated-LSTM-Shallow/Training_and_Test" #De onde se deve carregar um modelo em caso de aderencia. No caso de treinamento, pode ser o experimentPath, uma vez que nao carrega modelo algum


>> ### 5.1.1 MLP
	
	>>> #### 5.1.1.1 MLP (ACK, SND, RTT)


MLP

from TerminalSigmoid import TerminalSigmoid
objTerminal = TerminalSigmoid(basePath, experimentPath, modelPath, parTreino=False,parLstTrainFeatures=[1,2,3])
objTerminal.RunClient()




>> ### 5.1.1 LSTM
	
	>>> #### 5.1.1.1 LSTM (ACK, SND, RTT)

LSTM

from TerminalLSTM import TerminalLSTM
objTerminal = TerminalLSTM(basePath, experimentPath, modelPath, parTreino=False,parLstTrainFeatures=[1,2,3])
objTerminal.RunClient()




>> ### 5.1.1 CNN
	
	>>> #### 5.1.1.1 CNN (ACK, SND, RTT)


CNN
from TerminalCNN import TerminalCNN
objTerminal = TerminalCNN(basePath, experimentPath, modelPath, parTreino=False,parLstTrainFeatures=[1,2,3])
objTerminal.RunClient()




#############################XX FLUXOS #####################################
lstCFMLP.append(np.array([[,],[,]]))
lstCFMLP.append(np.array([[,],[,]]))
lstCFMLP.append(np.array([[,],[,]]))

lstCFLSTM.append(np.array([[,],[,]]))
lstCFLSTM.append(np.array([[,],[,]]))
lstCFLSTM.append(np.array([[,],[,]]))

lstCFCNN.append(np.array([[,],[,]]))
lstCFCNN.append(np.array([[,],[,]]))
lstCFCNN.append(np.array([[,],[,]]))



>> ### 5.1 MLP(ACK, SND, RTT)





import matplotlib.pyplot as plt
import matplotlib.markers
import seaborn as sns #;  sns.set()
import pandas as pd
import numpy as np
import matplotlib.ticker as ticker




lstCFs=[]
lstCFMLP=[]
lstCFLSTM=[]
lstCFCNN=[]

##########################################################################
'''
                                RENO
'''
##########################################################################

'''
                              05 FLUXOS
'''
lstCFMLP.append(np.array([[1551,0],[78,1171]]))
lstCFMLP.append(np.array([[1519,0],[125,1156]]))
lstCFMLP.append(np.array([[1610,0],[15,1175]]))


lstCFLSTM.append(np.array([[1518,0],[89,1190]]))
lstCFLSTM.append(np.array([[1476,0],[137,1184]]))
lstCFLSTM.append(np.array([[1460,0],[158,1179]]))




lstCFCNN.append(np.array([[1585,0],[39,1173]]))
lstCFCNN.append(np.array([[1584,2],[13,1198]]))
lstCFCNN.append(np.array([[1607,1],[13,1176]]))

'''
                              10 FLUXOS
'''
lstCFMLP.append(np.array([[1430,21],[49,1300]]))
lstCFMLP.append(np.array([[1401,14],[63,1322]]))
lstCFMLP.append(np.array([[1444,6],[61,1289]]))


lstCFLSTM.append(np.array([[1446,21],[48,1282]]))
lstCFLSTM.append(np.array([[1413,19],[77,1288]]))
lstCFLSTM.append(np.array([[1358,5],[122,1312]]))




lstCFCNN.append(np.array([[1408,6],[54,1329]]))
lstCFCNN.append(np.array([[1417,12],[49,1319]]))
lstCFCNN.append(np.array([[1426,11],[44,1316]]))


'''
                              20 FLUXOS
'''
lstCFMLP.append(np.array([[1312,38],[34,1416]]))
lstCFMLP.append(np.array([[1281,34],[40,1445]]))
lstCFMLP.append(np.array([[1262,6],[91,1441]]))


lstCFLSTM.append(np.array([[1308,34],[25,1430]]))
lstCFLSTM.append(np.array([[1341,23],[53,1380]]))
lstCFLSTM.append(np.array([[1271,30],[103,1393]]))




lstCFCNN.append(np.array([[1306,22],[38,1431]]))
lstCFCNN.append(np.array([[1250,5],[101,1441]]))
lstCFCNN.append(np.array([[1271,8],[76,1442]]))

'''
                              40 FLUXOS
'''

lstCFMLP.append(np.array([[1203,136],[63,1398]]))
lstCFMLP.append(np.array([[1214,125],[69,1392]]))
lstCFMLP.append(np.array([[1063,21],[213,1503]]))


lstCFLSTM.append(np.array([[1253,141],[49,1354]]))
lstCFLSTM.append(np.array([[1183,134],[91,1389]]))
lstCFLSTM.append(np.array([[1102,136],[168,1391]]))




lstCFCNN.append(np.array([[1179,110],[116,1392]]))
lstCFCNN.append(np.array([[1033,12],[240,1512]]))
lstCFCNN.append(np.array([[1028,21],[254,1494]]))


##########################################################################
'''
                                CUBIC
'''
##########################################################################

'''
                              05 FLUXOS
'''
lstCFMLP.append(np.array([[1275,0],[124,1401]]))
lstCFMLP.append(np.array([[1268,0],[169,1363]]))
lstCFMLP.append(np.array([[1388,0],[60,1352]]))


lstCFLSTM.append(np.array([[1260,0],[166,1371]]))
lstCFLSTM.append(np.array([[1250,0],[191,1356]]))
lstCFLSTM.append(np.array([[1252,0],[186,1359]]))




lstCFCNN.append(np.array([[1310,0],[108,1379]]))
lstCFCNN.append(np.array([[1356,2],[49,1390]]))
lstCFCNN.append(np.array([[1375,3],[51,1368]]))


'''
                              10 FLUXOS
'''
lstCFMLP.append(np.array([[1381,11],[57,1351]]))
lstCFMLP.append(np.array([[1330,10],[93,1367]]))
lstCFMLP.append(np.array([[1372,6],[79,1343]]))


lstCFLSTM.append(np.array([[1379,14],[50,1354]]))
lstCFLSTM.append(np.array([[1324,10],[105,1358]]))
lstCFLSTM.append(np.array([[1288,8],[165,1336]]))




lstCFCNN.append(np.array([[1376,7],[58,1356]]))
lstCFCNN.append(np.array([[1352,11],[75,1359]]))
lstCFCNN.append(np.array([[1352,12],[56,1377]]))

'''
                              20 FLUXOS
'''
lstCFMLP.append(np.array([[1285,29],[53,1433]]))
lstCFMLP.append(np.array([[1261,29],[64,1446]]))
lstCFMLP.append(np.array([[1209,8],[102,1481]]))


lstCFLSTM.append(np.array([[1271,36],[52,1438]]))
lstCFLSTM.append(np.array([[1247,26],[66,1458]]))
lstCFLSTM.append(np.array([[1219,10],[105,1463]]))




lstCFCNN.append(np.array([[1294,15],[41,1447]]))
lstCFCNN.append(np.array([[1229,5],[112,1451]]))
lstCFCNN.append(np.array([[1222,5],[119,1451]]))

'''
                              40 FLUXOS
'''

lstCFMLP.append(np.array([[1264,91],[69,1376]]))
lstCFMLP.append(np.array([[1277,89],[68,1366]]))
lstCFMLP.append(np.array([[1183,22],[164,1431]]))


lstCFLSTM.append(np.array([[1316,101],[59,1321]]))
lstCFLSTM.append(np.array([[1274,87],[82,1354]]))
lstCFLSTM.append(np.array([[1218,73],[140,1366]]))




lstCFCNN.append(np.array([[1236,76],[105,1380]]))
lstCFCNN.append(np.array([[1131,17],[206,1443]]))
lstCFCNN.append(np.array([[1139,22],[233,1403]]))


##########################################################################
'''
                                BBR
'''
##########################################################################

'''
                              05 FLUXOS
'''
lstCFMLP.append(np.array([[1530,0],[0,1270]]))
lstCFMLP.append(np.array([[1497,0],[0,1303]]))
lstCFMLP.append(np.array([[1516,0],[0,1284]]))

lstCFLSTM.append(np.array([[1547,0],[1,1249]]))
lstCFLSTM.append(np.array([[1533,0],[1,1263]]))
lstCFLSTM.append(np.array([[1535,0],[0,1262]]))

lstCFCNN.append(np.array([[1529,1],[0,1267]]))
lstCFCNN.append(np.array([[1532,1],[0,1264]]))
lstCFCNN.append(np.array([[1529,1],[0,1267]]))

'''
                              10 FLUXOS
'''

lstCFMLP.append(np.array([[1628,0],[0,1172]]))
lstCFMLP.append(np.array([[1599,0],[1,1200]]))
lstCFMLP.append(np.array([[1621,1],[0,1178]]))

lstCFLSTM.append(np.array([[1589,0],[1,1207]]))
lstCFLSTM.append(np.array([[1626,0],[2,1169]]))
lstCFLSTM.append(np.array([[1601,0],[4,1192]]))

lstCFCNN.append(np.array([[1621,0],[0,1176]]))
lstCFCNN.append(np.array([[1611,2],[0,1184]]))
lstCFCNN.append(np.array([[1603,1],[0,1193]]))

'''
                              20 FLUXOS
'''
#############################20 FLUXOS #####################################
lstCFMLP.append(np.array([[1581,0],[1,1218]]))
lstCFMLP.append(np.array([[1563,0],[4,1233]]))
lstCFMLP.append(np.array([[1592,0],[1,1207]]))

lstCFLSTM.append(np.array([[1600,0],[3,1194]]))
lstCFLSTM.append(np.array([[1614,0],[6,1177]]))
lstCFLSTM.append(np.array([[1572,0],[7,1218]]))

lstCFCNN.append(np.array([[1593,1],[2,1201]]))
lstCFCNN.append(np.array([[1597,0],[0,1200]]))
lstCFCNN.append(np.array([[1603,1],[0,1193]]))

#############################40 FLUXOS #####################################
lstCFMLP.append(np.array([[1449,0],[3,1348]]))
lstCFMLP.append(np.array([[1439,0],[5,1356]]))
lstCFMLP.append(np.array([[1446,1],[0,1353]]))

lstCFLSTM.append(np.array([[1456,0],[4,1337]]))
lstCFLSTM.append(np.array([[1442,0],[8,1347]]))
lstCFLSTM.append(np.array([[1438,0],[18,1341]]))

lstCFCNN.append(np.array([[1429,0],[3,1365]]))
lstCFCNN.append(np.array([[1478,0],[0,1319]]))
lstCFCNN.append(np.array([[1477,1],[1,1318]]))

###################################################################################################

##########################################BVEGASBR############################################################################
'''
#############################05 FLUXOS #####################################

lstCFMLP.append(np.array([[1530,0],[0,1270]]))
lstCFMLP.append(np.array([[1497,0],[0,1303]]))
lstCFMLP.append(np.array([[1516,0],[0,1284]]))

lstCFLSTM.append(np.array([[1547,0],[1,1249]]))
lstCFLSTM.append(np.array([[1533,0],[1,1263]]))
lstCFLSTM.append(np.array([[1535,0],[0,1262]]))

lstCFCNN.append(np.array([[1529,1],[0,1267]]))
lstCFCNN.append(np.array([[1532,1],[0,1264]]))
lstCFCNN.append(np.array([[1529,1],[0,1267]]))
'''
#############################10 FLUXOS #####################################

lstCFMLP.append(np.array([[1655,15],[97,1033]]))
lstCFMLP.append(np.array([[1557,13],[170,1060]]))
lstCFMLP.append(np.array([[1754,4],[14,1028]]))

lstCFLSTM.append(np.array([[1633,18],[129,1017]]))
lstCFLSTM.append(np.array([[1511,15],[189,1082]]))
lstCFLSTM.append(np.array([[1529,3],[209,1056]]))

lstCFCNN.append(np.array([[1665,8],[64,1060]]))
lstCFCNN.append(np.array([[1732,2],[14,1049]]))
lstCFCNN.append(np.array([[1724,2],[17,1054]]))

#############################20 FLUXOS #####################################
lstCFMLP.append(np.array([[1500,2],[50,1248]]))
lstCFMLP.append(np.array([[1425,0],[98,1277]]))
lstCFMLP.append(np.array([[1542,6],[11,1241]]))

lstCFLSTM.append(np.array([[1473,2],[72,1250]]))
lstCFLSTM.append(np.array([[1426,2],[123,1246]]))
lstCFLSTM.append(np.array([[1441,1],[119,1236]]))

lstCFCNN.append(np.array([[1521,0],[22,1254]]))
lstCFCNN.append(np.array([[1527,14],[7,1249]]))
lstCFCNN.append(np.array([[1573,15],[10,1199]]))


#############################40 FLUXOS #####################################
lstCFMLP.append(np.array([[1596,22],[39,1143]]))
lstCFMLP.append(np.array([[1547,28],[101,1124]]))
lstCFMLP.append(np.array([[1610,3],[15,1172]]))

lstCFLSTM.append(np.array([[1586,23],[82,1106]]))
lstCFLSTM.append(np.array([[1520,24],[116,1137]]))
lstCFLSTM.append(np.array([[1513,12],[132,1140]]))

lstCFCNN.append(np.array([[1575,17],[48,1157]]))
lstCFCNN.append(np.array([[1626,4],[16,1151]]))
lstCFCNN.append(np.array([[1656,5],[21,1115]]))


###################################################################################################






cf,checked_mlp = CheckSumCF(parLstCF=lstCFMLP, parSum=2800)#MLP
if(not checked_mlp):
  print("Soma Errada")
  print(cf)

cf,checked_lstm = CheckSumCF(parLstCF=lstCFLSTM, parSum=2797)#LSTM
if(not checked_lstm):
  print("Soma Errada")
  print(cf)

cf,checked_cnn = CheckSumCF(parLstCF=lstCFCNN, parSum=2797)#CNN
if(not checked_cnn):
  print("Soma Errada")
  print(cf)


lstCFs.extend(lstCFMLP)
lstCFs.extend(lstCFLSTM)
lstCFs.extend(lstCFCNN)

lstModelos = [u"MLP\u2081\u2082\u2083",u"MLP\u2081\u2083",u"MLP\u2082\u2083",
             u"LSTM\u2081\u2082\u2083",u"LSTM\u2081\u2083",u"LSTM\u2082\u2083",
             u"CNN\u2081\u2082\u2083",u"CNN\u2081\u2083",u"CNN\u2082\u2083",
                            
             u"MLP\u2081\u2082\u2083",u"MLP\u2081\u2083",u"MLP\u2082\u2083",
             u"LSTM\u2081\u2082\u2083",u"LSTM\u2081\u2083",u"LSTM\u2082\u2083",
             u"CNN\u2081\u2082\u2083",u"CNN\u2081\u2083",u"CNN\u2082\u2083",
              
             u"MLP\u2081\u2082\u2083",u"MLP\u2081\u2083",u"MLP\u2082\u2083",
             u"LSTM\u2081\u2082\u2083",u"LSTM\u2081\u2083",u"LSTM\u2082\u2083",
             u"CNN\u2081\u2082\u2083",u"CNN\u2081\u2083",u"CNN\u2082\u2083",
              
             u"MLP\u2081\u2082\u2083",u"MLP\u2081\u2083",u"MLP\u2082\u2083",
             u"LSTM\u2081\u2082\u2083",u"LSTM\u2081\u2083",u"LSTM\u2082\u2083",
             u"CNN\u2081\u2082\u2083",u"CNN\u2081\u2083",u"CNN\u2082\u2083",
              
             ########################################### 

             u"MLP\u2081\u2082\u2083",u"MLP\u2081\u2083",u"MLP\u2082\u2083",
             u"LSTM\u2081\u2082\u2083",u"LSTM\u2081\u2083",u"LSTM\u2082\u2083",
             u"CNN\u2081\u2082\u2083",u"CNN\u2081\u2083",u"CNN\u2082\u2083",
              
             u"MLP\u2081\u2082\u2083",u"MLP\u2081\u2083",u"MLP\u2082\u2083",
             u"LSTM\u2081\u2082\u2083",u"LSTM\u2081\u2083",u"LSTM\u2082\u2083",
             u"CNN\u2081\u2082\u2083",u"CNN\u2081\u2083",u"CNN\u2082\u2083",
              
             u"MLP\u2081\u2082\u2083",u"MLP\u2081\u2083",u"MLP\u2082\u2083",
             u"LSTM\u2081\u2082\u2083",u"LSTM\u2081\u2083",u"LSTM\u2082\u2083",
             u"CNN\u2081\u2082\u2083",u"CNN\u2081\u2083",u"CNN\u2082\u2083",
              
             u"MLP\u2081\u2082\u2083",u"MLP\u2081\u2083",u"MLP\u2082\u2083",
             u"LSTM\u2081\u2082\u2083",u"LSTM\u2081\u2083",u"LSTM\u2082\u2083",
             u"CNN\u2081\u2082\u2083",u"CNN\u2081\u2083",u"CNN\u2082\u2083",
              
             ###########################################

             u"MLP\u2081\u2082\u2083",u"MLP\u2081\u2083",u"MLP\u2082\u2083",
             u"LSTM\u2081\u2082\u2083",u"LSTM\u2081\u2083",u"LSTM\u2082\u2083",
             u"CNN\u2081\u2082\u2083",u"CNN\u2081\u2083",u"CNN\u2082\u2083",
              
             u"MLP\u2081\u2082\u2083",u"MLP\u2081\u2083",u"MLP\u2082\u2083",
             u"LSTM\u2081\u2082\u2083",u"LSTM\u2081\u2083",u"LSTM\u2082\u2083",
             u"CNN\u2081\u2082\u2083",u"CNN\u2081\u2083",u"CNN\u2082\u2083",
              
             u"MLP\u2081\u2082\u2083",u"MLP\u2081\u2083",u"MLP\u2082\u2083",
             u"LSTM\u2081\u2082\u2083",u"LSTM\u2081\u2083",u"LSTM\u2082\u2083",
             u"CNN\u2081\u2082\u2083",u"CNN\u2081\u2083",u"CNN\u2082\u2083",
              
             u"MLP\u2081\u2082\u2083",u"MLP\u2081\u2083",u"MLP\u2082\u2083",
             u"LSTM\u2081\u2082\u2083",u"LSTM\u2081\u2083",u"LSTM\u2082\u2083",
             u"CNN\u2081\u2082\u2083",u"CNN\u2081\u2083",u"CNN\u2082\u2083",
              ###########################################

             u"MLP\u2081\u2082\u2083",u"MLP\u2081\u2083",u"MLP\u2082\u2083",
             u"LSTM\u2081\u2082\u2083",u"LSTM\u2081\u2083",u"LSTM\u2082\u2083",
             u"CNN\u2081\u2082\u2083",u"CNN\u2081\u2083",u"CNN\u2082\u2083",
              
             u"MLP\u2081\u2082\u2083",u"MLP\u2081\u2083",u"MLP\u2082\u2083",
             u"LSTM\u2081\u2082\u2083",u"LSTM\u2081\u2083",u"LSTM\u2082\u2083",
             u"CNN\u2081\u2082\u2083",u"CNN\u2081\u2083",u"CNN\u2082\u2083",
              
             u"MLP\u2081\u2082\u2083",u"MLP\u2081\u2083",u"MLP\u2082\u2083",
             u"LSTM\u2081\u2082\u2083",u"LSTM\u2081\u2083",u"LSTM\u2082\u2083",
             u"CNN\u2081\u2082\u2083",u"CNN\u2081\u2083",u"CNN\u2082\u2083"]






lstFluxos = ["5N","5N","5N","5N","5N","5N","5N","5N","5N",
             "10N","10N","10N","10N","10N","10N","10N","10N","10N",
             "20N","20N","20N","20N","20N","20N","20N","20N","20N",
             "40N","40N","40N","40N","40N","40N","40N","40N","40N",

             "5C","5C","5C","5C","5C","5C","5C","5C","5C",
             "10C","10C","10C","10C","10C","10C","10C","10C","10C",
             "20C","20C","20C","20C","20C","20C","20C","20C","20C",
             "40C","40C","40C","40C","40C","40C","40C","40C","40C",
             
             "5B","5B","5B","5B","5B","5B","5B","5B","5B",
             "10B","10B","10B","10B","10B","10B","10B","10B","10B",
             "20B","20B","20B","20B","20B","20B","20B","20B","20B",
             "40B","40B","40B","40B","40B","40B","40B","40B","40B",
             
             
             "10V","10V","10V","10V","10V","10V","10V","10V","10V",
             "20V","20V","20V","20V","20V","20V","20V","20V","20V",
             "40V","40V","40V","40V","40V","40V","40V","40V","40V"]
 
'''
lstFeatures = ["ack_ewma, send_ewma, rtt_ratio","ack_ewma, rtt_ratio", "send_ewma, rtt_ratio","ack_ewma, send_ewma",
               "ack_ewma, send_ewma, rtt_ratio","ack_ewma, rtt_ratio", "send_ewma, rtt_ratio","ack_ewma, send_ewma",
               "ack_ewma, send_ewma, rtt_ratio","ack_ewma, rtt_ratio", "send_ewma, rtt_ratio","ack_ewma, send_ewma"]

'''

my_x_tick = []

for i in range(36):
  if(not i):
    my_x_tick.append("0.01")
  #elif (i == 18):
    #my_x_tick.append("0.05")
  elif (i == 35):
    my_x_tick.append("0.2")
  else:
    my_x_tick.append(" ")

def ConstructROCGraph(parConfusionMatrizes):    


    lstTPRs =  []
    lstFPRs =  []

    for i in range (len (parConfusionMatrizes)):
        temp_TPR = parConfusionMatrizes[i][1][1]/(parConfusionMatrizes[i][0][1]+parConfusionMatrizes[i][1][1])
        lstTPRs.append(temp_TPR)
        temp_FPR = parConfusionMatrizes[i][1][0]/(parConfusionMatrizes[i][0][0]+parConfusionMatrizes[i][1][0])
        lstFPRs.append(temp_FPR)
        if(temp_FPR > 0.170):
          print(parConfusionMatrizes[i], temp_FPR)

    data = {'TPR': lstTPRs,'FPR': lstFPRs,'Modelo' : lstModelos,'Fluxos': lstFluxos}

    df = pd.DataFrame(data)
    #markers = {"ack_ewma, send_ewma, rtt_ratio": "d", "ack_ewma, rtt_ratio": "X","send_ewma, rtt_ratio":"s", "send_ewma, rtt_ratio":"v", "ack_ewma, send_ewma": "D"}
    
    markers = {"5": "^",  
               "10": "s",
               "20":"D", 
               "40":"p"}

#[',', '.', 'o', 'v', '^', '<', '>', '8', 's', 'p', '*', 'h', 'H', 'D', 'd', 'P', 'X']

    #sns.scatterplot(data=df, x="FPR", y="TPR",hue="Modelo", style="Features",markers=markers)
    #sns.set_style("whitegrid")
    color_list1 = sns.color_palette("rocket").as_hex()
    print(color_list1)
    color_list2 = sns.color_palette("mako").as_hex()
    print(color_list2)
    color_list3 = sns.color_palette("YlOrBr").as_hex()
    print(color_list3)

    color_list4 =sns.light_palette("seagreen").as_hex()
    print(color_list4)



    
    #sns.scatterplot(data=df, x="FPR", y="TPR",hue="Modelo",style="Fluxos",markers=markers, palette=sns.color_palette("Paired").as_hex())
    '''
    #swarmplot
    ax = sns.swarmplot(data=df, x="FPR", y="TPR",hue="Modelo", palette=sns.color_palette("Paired").as_hex())
    ax.set_xticklabels(['{:.2f}'.format(float(t.get_text())) for t in ax.get_xticklabels()])
    ax.set_xticklabels(ax.get_xticklabels(), rotation=40, ha="right",fontsize=10)
    #ax.xaxis.set_major_locator(ticker.MultipleLocator(5))
    #ax.xaxis.set_major_formatter(ticker.ScalarFormatter())

    ticks_loc = ax.get_xticks()
    ax.xaxis.set_major_locator(ticker.FixedLocator(ticks_loc))
    ax.xaxis.set_major_formatter(ticker.FixedFormatter(my_x_tick))
    '''
    '''
    #stripplot
    ax = sns.stripplot(data=df, x="FPR", y="TPR",hue="Modelo", palette=sns.color_palette("Paired").as_hex())
    ax.set_xticklabels(['{:.3f}'.format(float(t.get_text())) for t in ax.get_xticklabels()])
    ax.set_xticklabels(ax.get_xticklabels(), rotation=80, ha="right",fontsize=10)

    plt.title("EspaÃ§o ROC - GeneralizaÃ§Ã£o NewReno")
    plt.legend(loc=2, bbox_to_anchor=(1, 1))
    '''
    #g = sns.catplot(data=df,  x="FPR", y="TPR", hue="Fluxos", col="Modelo",palette=sns.color_palette("Paired").as_hex())
    g = sns.catplot(data=df,  x="FPR", y="TPR", hue="Fluxos", col="Modelo",palette="gray")

    for ax in g.axes[0]:
      #ax.set_ylabel('test')
      #ax.set_ylim(0,1.5)
      #ax.set_title('title')
      # now you can obtain the axis from one of the axes
      #x_axis = ax.get_xaxis()

      ax.set_xticklabels(['{:.3f}'.format(float(t.get_text())) for t in ax.get_xticklabels()])
      ax.set_xticklabels(ax.get_xticklabels(), rotation=80, ha="right",fontsize=5)
      for t in ax.get_xticklabels():
        print(t.get_text(),end=", ")
      print(" ")
    #PlotROC(data,parPointLabels,parNumCFByModel=6)
#print(lstCFs)
#print(len(lstCFs))

if(checked_mlp and checked_lstm and checked_cnn):
  ConstructROCGraph(lstCFs)
















